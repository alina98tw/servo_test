// Generated by gencpp from file servo_test_pack/two_servos.msg
// DO NOT EDIT!


#ifndef SERVO_TEST_PACK_MESSAGE_TWO_SERVOS_H
#define SERVO_TEST_PACK_MESSAGE_TWO_SERVOS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace servo_test_pack
{
template <class ContainerAllocator>
struct two_servos_
{
  typedef two_servos_<ContainerAllocator> Type;

  two_servos_()
    : servo_1(0.0)
    , servo_2(0.0)  {
    }
  two_servos_(const ContainerAllocator& _alloc)
    : servo_1(0.0)
    , servo_2(0.0)  {
  (void)_alloc;
    }



   typedef float _servo_1_type;
  _servo_1_type servo_1;

   typedef float _servo_2_type;
  _servo_2_type servo_2;





  typedef boost::shared_ptr< ::servo_test_pack::two_servos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::servo_test_pack::two_servos_<ContainerAllocator> const> ConstPtr;

}; // struct two_servos_

typedef ::servo_test_pack::two_servos_<std::allocator<void> > two_servos;

typedef boost::shared_ptr< ::servo_test_pack::two_servos > two_servosPtr;
typedef boost::shared_ptr< ::servo_test_pack::two_servos const> two_servosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::servo_test_pack::two_servos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::servo_test_pack::two_servos_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace servo_test_pack

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'servo_test_pack': ['/home/alina98-raspi/servo_test/src/servo_test_pack/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::servo_test_pack::two_servos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::servo_test_pack::two_servos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_test_pack::two_servos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::servo_test_pack::two_servos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_test_pack::two_servos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::servo_test_pack::two_servos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::servo_test_pack::two_servos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9443fb1347cc03bf18054733acf7564a";
  }

  static const char* value(const ::servo_test_pack::two_servos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9443fb1347cc03bfULL;
  static const uint64_t static_value2 = 0x18054733acf7564aULL;
};

template<class ContainerAllocator>
struct DataType< ::servo_test_pack::two_servos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "servo_test_pack/two_servos";
  }

  static const char* value(const ::servo_test_pack::two_servos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::servo_test_pack::two_servos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 servo_1\n"
"float32 servo_2\n"
;
  }

  static const char* value(const ::servo_test_pack::two_servos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::servo_test_pack::two_servos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servo_1);
      stream.next(m.servo_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct two_servos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::servo_test_pack::two_servos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::servo_test_pack::two_servos_<ContainerAllocator>& v)
  {
    s << indent << "servo_1: ";
    Printer<float>::stream(s, indent + "  ", v.servo_1);
    s << indent << "servo_2: ";
    Printer<float>::stream(s, indent + "  ", v.servo_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVO_TEST_PACK_MESSAGE_TWO_SERVOS_H
